{"ast":null,"code":"import * as __NgCli_bootstrap_1 from \"@angular/platform-browser\";\nimport { AppModule } from './app/app.module';\n__NgCli_bootstrap_1.platformBrowser().bootstrapModule(AppModule).catch(err => console.error(err));\n//\n//\n// function randomInteger(min:number, max:number) {\n//   return Math.floor(Math.random() * (max - min + 1)) + min;\n// }\n//\n// function rgb(r:any, g:any, b:any) {\n//   return new THREE.Vector3(r, g, b);\n// }\n//\n// function doThreeJSBackground() {\n//   document.addEventListener(\"DOMContentLoaded\", function(e) {\n//\n//     const renderer = new THREE.WebGLRenderer();\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     document.body.appendChild( renderer.domElement )\n//\n//     const scene = new THREE.Scene();\n//     const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n//\n//     let vCheck = false;\n//\n//     camera.position.z = 5;\n//\n//     var randomisePosition = new THREE.Vector2(1, 2);\n//\n//     var R = function(x:any, y:any, t:any) {\n//       return( Math.floor(192 + 64*Math.cos( (x*x-y*y)/300 + t )) );\n//     }\n//\n//     var G = function(x:any, y:any, t:any) {\n//       return( Math.floor(192 + 64*Math.sin( (x*x*Math.cos(t/4)+y*y*Math.sin(t/3))/300 ) ) );\n//     }\n//\n//     var B = function(x:any, y:any, t:any) {\n//       return( Math.floor(192 + 64*Math.sin( 5*Math.sin(t/9) + ((x-100)*(x-100)+(y-100)*(y-100))/1100) ));\n//     }\n//     let sNoise = document.querySelector('#snoise-function').textContent\n//     let geometry = new THREE.PlaneGeometry(window.innerWidth / 2, 400, 100, 100);\n//     let material = new THREE.ShaderMaterial({\n//       uniforms: {\n//         u_bg: {type: 'v3', value: rgb(162, 138, 241)},\n//         u_bgMain: {type: 'v3', value: rgb(162, 138, 241)},\n//         u_color1: {type: 'v3', value: rgb(162, 138, 241)},\n//         u_color2: {type: 'v3', value: rgb(82, 31, 241)},\n//         u_time: {type: 'f', value: 0},\n//         u_randomisePosition: { type: 'v2', value: randomisePosition }\n//       },\n//       fragmentShader: sNoise + document.querySelector('#fragment-shader').textContent,\n//       vertexShader: sNoise + document.querySelector('#vertex-shader').textContent,\n//     });\n//\n//     let mesh = new THREE.Mesh(geometry, material);\n//     mesh.position.set(0, 140, -280);\n//     mesh.scale.multiplyScalar(5);\n//     mesh.rotationX = -1.0;\n//     mesh.rotationY = 0.0;\n//     mesh.rotationZ = 0.1;\n//     scene.add(mesh);\n//\n//     renderer.render( scene, camera );\n//     let t = 0;\n//     let j = 0;\n//     let x = randomInteger(0, 32);\n//     let y = randomInteger(0, 32);\n//     const animate = function () {\n//       requestAnimationFrame( animate );\n//       renderer.render( scene, camera );\n//       mesh.material.uniforms.u_randomisePosition.value = new THREE.Vector2(j, j);\n//\n//       mesh.material.uniforms.u_color1.value = new THREE.Vector3(R(x,y,t/2), G(x,y,t/2), B(x,y,t/2));\n//\n//       mesh.material.uniforms.u_time.value = t;\n//       if(t % 0.1 == 0) {\n//         if(vCheck == false) {\n//           x -= 1;\n//           if(x <= 0) {\n//             vCheck = true;\n//           }\n//         } else {\n//           x += 1;\n//           if(x >= 32) {\n//             vCheck = false;\n//           }\n//\n//         }\n//       }\n//\n//       // Increase t by a certain value every frame\n//       j = j + 0.01;\n//       t = t + 0.05;\n//     };\n//     animate();\n//\n//   });\n// }\n//\n// doThreeJSBackground();","map":{"version":3,"mappings":";AACA,SAASA,SAAS,QAAQ,kBAAkB;AAE5CC,qCAAwB,CAACC,eAAe,CAACF,SAAS,CAAC,CAChDG,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","names":["AppModule","__NgCli_bootstrap_1","bootstrapModule","catch","err","console","error"],"sourceRoot":"","sources":["/Users/chris/projects/km/src/main.ts"],"sourcesContent":["import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n//\n//\n// function randomInteger(min:number, max:number) {\n//   return Math.floor(Math.random() * (max - min + 1)) + min;\n// }\n//\n// function rgb(r:any, g:any, b:any) {\n//   return new THREE.Vector3(r, g, b);\n// }\n//\n// function doThreeJSBackground() {\n//   document.addEventListener(\"DOMContentLoaded\", function(e) {\n//\n//     const renderer = new THREE.WebGLRenderer();\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     document.body.appendChild( renderer.domElement )\n//\n//     const scene = new THREE.Scene();\n//     const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n//\n//     let vCheck = false;\n//\n//     camera.position.z = 5;\n//\n//     var randomisePosition = new THREE.Vector2(1, 2);\n//\n//     var R = function(x:any, y:any, t:any) {\n//       return( Math.floor(192 + 64*Math.cos( (x*x-y*y)/300 + t )) );\n//     }\n//\n//     var G = function(x:any, y:any, t:any) {\n//       return( Math.floor(192 + 64*Math.sin( (x*x*Math.cos(t/4)+y*y*Math.sin(t/3))/300 ) ) );\n//     }\n//\n//     var B = function(x:any, y:any, t:any) {\n//       return( Math.floor(192 + 64*Math.sin( 5*Math.sin(t/9) + ((x-100)*(x-100)+(y-100)*(y-100))/1100) ));\n//     }\n//     let sNoise = document.querySelector('#snoise-function').textContent\n//     let geometry = new THREE.PlaneGeometry(window.innerWidth / 2, 400, 100, 100);\n//     let material = new THREE.ShaderMaterial({\n//       uniforms: {\n//         u_bg: {type: 'v3', value: rgb(162, 138, 241)},\n//         u_bgMain: {type: 'v3', value: rgb(162, 138, 241)},\n//         u_color1: {type: 'v3', value: rgb(162, 138, 241)},\n//         u_color2: {type: 'v3', value: rgb(82, 31, 241)},\n//         u_time: {type: 'f', value: 0},\n//         u_randomisePosition: { type: 'v2', value: randomisePosition }\n//       },\n//       fragmentShader: sNoise + document.querySelector('#fragment-shader').textContent,\n//       vertexShader: sNoise + document.querySelector('#vertex-shader').textContent,\n//     });\n//\n//     let mesh = new THREE.Mesh(geometry, material);\n//     mesh.position.set(0, 140, -280);\n//     mesh.scale.multiplyScalar(5);\n//     mesh.rotationX = -1.0;\n//     mesh.rotationY = 0.0;\n//     mesh.rotationZ = 0.1;\n//     scene.add(mesh);\n//\n//     renderer.render( scene, camera );\n//     let t = 0;\n//     let j = 0;\n//     let x = randomInteger(0, 32);\n//     let y = randomInteger(0, 32);\n//     const animate = function () {\n//       requestAnimationFrame( animate );\n//       renderer.render( scene, camera );\n//       mesh.material.uniforms.u_randomisePosition.value = new THREE.Vector2(j, j);\n//\n//       mesh.material.uniforms.u_color1.value = new THREE.Vector3(R(x,y,t/2), G(x,y,t/2), B(x,y,t/2));\n//\n//       mesh.material.uniforms.u_time.value = t;\n//       if(t % 0.1 == 0) {\n//         if(vCheck == false) {\n//           x -= 1;\n//           if(x <= 0) {\n//             vCheck = true;\n//           }\n//         } else {\n//           x += 1;\n//           if(x >= 32) {\n//             vCheck = false;\n//           }\n//\n//         }\n//       }\n//\n//       // Increase t by a certain value every frame\n//       j = j + 0.01;\n//       t = t + 0.05;\n//     };\n//     animate();\n//\n//   });\n// }\n//\n// doThreeJSBackground();\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}